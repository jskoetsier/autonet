name: Security

on:
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    # Note: CodeQL requires GitHub Advanced Security (not available on all repos)
    continue-on-error: true
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
      continue-on-error: true

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      continue-on-error: true

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      continue-on-error: true

  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Check production dependencies
      run: |
        safety check -r requirements.txt --json --output safety-prod.json
      continue-on-error: true

    - name: Check web UI dependencies
      run: |
        safety check -r requirements-webui.txt --json --output safety-webui.json
      continue-on-error: true

    - name: Upload safety results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-reports
        path: safety-*.json

  bandit-scan:
    name: Bandit Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]

    - name: Run Bandit scan
      run: |
        bandit -r lib/ plugins/ -ll -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Bandit scan (screen output)
      run: |
        bandit -r lib/ plugins/ -ll -f screen

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --only-verified
      continue-on-error: true

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/django
      continue-on-error: true

  trivy:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
      continue-on-error: true

    - name: Run Trivy and save results
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-results.json'
      continue-on-error: true

    - name: Upload Trivy results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-report
        path: trivy-results.json

  audit-summary:
    name: Security Audit Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, bandit-scan, secret-scan]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate security report
      run: |
        echo "# Security Audit Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
        echo "- Bandit Scan: ${{ needs.bandit-scan.result }}" >> security-summary.md
        echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "Run Date: $(date -u)" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
