name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=lib --cov=plugins --cov-report=xml --cov-report=term || true
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Lint with ruff
      run: |
        ruff check . --output-format=github
      continue-on-error: true

    - name: Format check with black
      run: |
        black --check . --exclude '/(\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|venv|\.svn|_build|buck-out|build|dist)/'
      continue-on-error: true

    - name: Sort imports check
      run: |
        isort . --check-only --profile black
      continue-on-error: true

    - name: Type check with mypy
      run: |
        mypy lib/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Bandit security checks
      run: |
        bandit -r lib/ plugins/ -ll -f screen

    - name: Check dependencies with safety
      run: |
        safety check --json
      continue-on-error: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Check documentation build
      run: |
        echo "Documentation check placeholder - will add Sphinx build when docs/ setup is complete"
        # Future: sphinx-build -b html docs/ docs/_build/html -W

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run integration tests
      run: |
        # Placeholder for integration tests
        echo "Integration tests placeholder - will add when integration test suite is ready"
        # Future: pytest tests/integration/ -v

    - name: Test CLI commands
      run: |
        python autonet.py --help
        python autonet.py generate --help
        python autonet.py deploy --help
        python autonet.py config --help

  webui:
    name: Web UI Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-webui.txt
        pip install -r requirements-dev.txt

    - name: Run Django checks
      run: |
        cd webui
        python manage.py check
      env:
        DJANGO_SECRET_KEY: test-secret-key-for-ci
        DJANGO_DEBUG: False
        DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1,testserver

    - name: Generate and check migrations
      run: |
        cd webui
        python manage.py makemigrations
        python manage.py migrate
      env:
        DJANGO_SECRET_KEY: test-secret-key-for-ci

    - name: Test Django collectstatic
      run: |
        cd webui
        python manage.py collectstatic --noinput
      env:
        DJANGO_SECRET_KEY: test-secret-key-for-ci
